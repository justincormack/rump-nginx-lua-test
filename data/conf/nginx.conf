worker_processes 1;
error_log stderr;
pid /tmp/nginx.pid;
user daemon daemon;
daemon off;
master_process off;

events {
    worker_connections 128;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format    main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log    /dev/null;
    lua_package_path "/data/?.lua;;";
    resolver 8.8.8.8;

    server {
        listen       80;
        listen       [::]:80;
        server_name  localhost;

        location / {
	    default_type 'text/html';
	                content_by_lua '
                local memcached = require "memcached"
                local memc, err = memcached:new()
                if not memc then
                    ngx.say("failed to instantiate memc: ", err)
                    return
                end

                memc:set_timeout(1000) -- 1 sec

                local ok, err = memc:connect("zander.myriabit.eu", 11211)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
		local res, flags, err = memc:get("access")
		if not res then memc:set("access", 0) end

                local ok, err = memc:incr("access", 1)
                if not ok then
                    ngx.say("failed to increment: ", err)
                    return
                end

                local res, flags, err = memc:get("access")
                if err then
                    ngx.say("failed to get access: ", err)
                    return
                end

                if not res then
                    ngx.say("dog not found")
                    return
                end

                ngx.say("counter: ", res)

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle timeout
                local ok, err = memc:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("cannot set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = memc:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            ';
        }
    }
}
